defmodule FlipText do
  @moduledoc """
  A simple text flipper.
  """

  @flip_table %{
    "P" => "Ԁ", "i" => "ı", "‾" => "_", "g" => "ƃ", "a" => "ɐ", "E" => "Ǝ",
    "n" => "u", "m" => "ɯ", "&" => "⅋", "ɥ" => "h", "K" => "⋊",
    "„" => "\"", "A" => "∀", "◖" => "D", "ᴧ" => "V", "[" => "]",
    "q" => "b", "r" => "ɹ", "M" => "W", "(" => ")", "4" => "ᔭ", "d" => "p",
    "F" => "Ⅎ", "Q" => "Ό", "ǝ" => "e", "‿" => "⁀", "Ɫ" => "7",
    "ɐ" => "a", "j" => "ɾ", "p" => "d", "?" => "¿", "3" => "Ɛ", "R" => "ᴚ",
    "ɾ" => "j", "9" => "6", "Ǝ" => "E", "7" => "Ɫ", "Ⅎ" => "F", "ʞ" => "k",
    "ʍ" => "w", "⅁" => "G", "ɟ" => "f", "⅄" => "Y", "¡" => "!", "<" => ">",
    "U" => "∩", "ʎ" => "y", "ʇ" => "t", ";" => "؛", "ʃ" => "l",
    "N" => "ᴎ", "'" => ",", "!" => "¡", "ı" => "i", "؛" => ";", "v" => "ʌ",
    ">" => "<", "∵" => "∴", "D" => "◖", "t" => "ʇ", "ɹ" => "r",
    "ɔ" => "c", "⁅" => "⁆", "_" => "‾", "ε" => "B", "\"" => "„",
    "ƃ" => "g", "." => "˙", "," => "'", "l" => "ʃ", "b" => "q", "k" => "ʞ",
    "e" => "ǝ", "}" => "{", "f" => "ɟ", "y" => "ʎ", "⁀" => "‿",
    "Ԁ" => "P", "B" => "ε", "∩" => "U", "6" => "9", ")" => "(", "h" => "ɥ",
    "V" => "ᴧ", "Y" => "⅄", "⊥" => "T", "u" => "n", "ſ" => "J",
    "ʌ" => "v", "{" => "}", "J" => "ſ", "⅂" => "L", "˙" => ".", "Ό" => "Q",
    "T" => "⊥", "⋊" => "K", "⅋" => "&", "L" => "⅂", "¿" => "?",
    "ᔭ" => "4", "C" => "Ↄ", "⁆" => "⁅", "ᴚ" => "R", "ɯ" => "m",
    "Ɛ" => "3", "c" => "ɔ", "w" => "ʍ", "]" => "[", "Ↄ" => "C", "∀" => "A",
    "∴" => "∵", "W" => "M", "ᴎ" => "N", "G" => "⅁"}


  @doc """
  Attempt to flip a string of text upside down.

  # Example

      iex> FlipText.flip "hello world"
      "pʃɹoʍ oʃʃǝɥ"

  """
  def flip([]), do: nil
  def flip([chr]) do
    case @flip_table[chr] do
      nil -> chr
      match -> match
    end
  end
  def flip(text) when is_binary(text) and is_bitstring(text), do: flip(String.codepoints text)
  def flip([h | t]), do: flip(t) <> flip(h)
  def flip(chr) do
    case @flip_table[chr] do
      nil -> chr
      match -> match
    end
  end

end